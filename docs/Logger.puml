@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

'Classes
object UserCode {
    StdioLogger logger;
    logger.log();
}

interface LoggerType {
+{abstract}Print()
}

class LoggerTypeFile {
+Print()
}

class LoggerTypeStdio {
+Print()
}

class LoggerTypeSyslog {
+Print()
}

abstract class Logger {
+Log()
+{abstract}Create(): std::unique_ptr<LoggerType>
}

class StdioLogger {
+Create(): std::unique_ptr<LoggerType>
}

class FileLogger {
+Create(): std::unique_ptr<LoggerType>
}

class SyslogLogger {
+Create(): std::unique_ptr<LoggerType>
}

'Relations
UserCode --> StdioLogger

Logger<|-- StdioLogger
Logger<|-- FileLogger
Logger<|-- SyslogLogger

Logger -> LoggerType

LoggerType <|.. LoggerTypeStdio
LoggerType <|.. LoggerTypeFile
LoggerType <|.. LoggerTypeSyslog

'Notes
note as N1
    <b><u>Factory method pattern</u></b>
end note

note left of Logger::Log()
    static auto p_logger = this->Create();
    p_logger->Print();
end note

note left of Logger::Create()
    <b>Factory method</b>
end note

note left of StdioLogger::Create()
    return std::make_unique<LoggerTypeStdio>();
end note

@enduml